// <auto-generated />
using System;
using Infrastructure.Persistent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Attributes.Educations.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("degree");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid")
                        .HasColumnName("developer_id");

                    b.Property<DateTime?>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("institution");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_educations");

                    b.HasIndex("DeveloperId")
                        .HasDatabaseName("ix_educations_developer_id");

                    b.ToTable("educations", "public");
                });

            modelBuilder.Entity("Domain.Attributes.Experiences.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid")
                        .HasColumnName("developer_id");

                    b.Property<string>("Employer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("employer");

                    b.Property<DateTime?>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_experiences");

                    b.HasIndex("DeveloperId")
                        .HasDatabaseName("ix_experiences_developer_id");

                    b.ToTable("experiences", "public");
                });

            modelBuilder.Entity("Domain.Attributes.JobAttachments.JobAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_job_attachments");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_job_attachments_job_id");

                    b.ToTable("job_attachments", "public");
                });

            modelBuilder.Entity("Domain.Attributes.Languages.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_languages_name");

                    b.ToTable("languages", "public");
                });

            modelBuilder.Entity("Domain.Attributes.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_skills_name");

                    b.ToTable("skills", "public");
                });

            modelBuilder.Entity("Domain.Attributes.Specializations.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_specializations");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_specializations_name");

                    b.ToTable("specializations", "public");
                });

            modelBuilder.Entity("Domain.Entities.Developers.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<int>("ModalityPreferred")
                        .HasColumnType("integer")
                        .HasColumnName("modality_preferred");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PortfolioUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("ProfilePictureUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_picture_url");

                    b.Property<double>("SalaryPerHourExpected")
                        .HasColumnType("double precision")
                        .HasColumnName("salary_per_hour_expected");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("double precision")
                        .HasColumnName("years_of_experience");

                    b.HasKey("Id")
                        .HasName("pk_developers");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_developers_specialization_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_developers_user_id");

                    b.ToTable("developers", "public");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<int>("Modality")
                        .HasColumnType("integer")
                        .HasColumnName("modality");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid")
                        .HasColumnName("recruiter_id");

                    b.Property<double>("SalaryPerHour")
                        .HasColumnType("double precision")
                        .HasColumnName("salary_per_hour");

                    b.Property<int>("Schedule")
                        .HasColumnType("integer")
                        .HasColumnName("schedule");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex("RecruiterId")
                        .HasDatabaseName("ix_jobs_recruiter_id");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_jobs_specialization_id");

                    b.ToTable("jobs", "public");
                });

            modelBuilder.Entity("Domain.Entities.Recruiters.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ProfilePictureUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_picture_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_recruiters");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_recruiters_name");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_recruiters_user_id");

                    b.ToTable("recruiters", "public");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("DoOnboarding")
                        .HasColumnType("boolean")
                        .HasColumnName("do_onboarding");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Domain.Joins.DeveloperLanguages.DeveloperLanguage", b =>
                {
                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid")
                        .HasColumnName("developer_id");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DeveloperId", "LanguageId")
                        .HasName("pk_developer_languages");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_developer_languages_language_id");

                    b.ToTable("developer_languages", "public");
                });

            modelBuilder.Entity("Domain.Joins.DeveloperSkills.DeveloperSkill", b =>
                {
                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid")
                        .HasColumnName("developer_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DeveloperId", "SkillId")
                        .HasName("pk_developer_skills");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_developer_skills_skill_id");

                    b.ToTable("developer_skills", "public");
                });

            modelBuilder.Entity("Domain.Joins.JobDevelopers.JobDeveloper", b =>
                {
                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid")
                        .HasColumnName("developer_id");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DeveloperId", "JobId")
                        .HasName("pk_job_developers");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_job_developers_job_id");

                    b.ToTable("job_developers", "public");
                });

            modelBuilder.Entity("Domain.Joins.JobLanguages.JobLanguage", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("JobId", "LanguageId")
                        .HasName("pk_job_languages");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_job_languages_language_id");

                    b.ToTable("job_languages", "public");
                });

            modelBuilder.Entity("Domain.Joins.JobSkills.JobSkill", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("JobId", "SkillId")
                        .HasName("pk_job_skills");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_job_skills_skill_id");

                    b.ToTable("job_skills", "public");
                });

            modelBuilder.Entity("Domain.Joins.UserFollows.UserFollow", b =>
                {
                    b.Property<Guid>("UserFollowedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_followed_id");

                    b.Property<Guid>("UserFollowerId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_follower_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserFollowedId", "UserFollowerId")
                        .HasName("pk_user_follows");

                    b.HasIndex("UserFollowerId")
                        .HasDatabaseName("ix_user_follows_user_follower_id");

                    b.ToTable("user_follows", "public");
                });

            modelBuilder.Entity("Domain.Joins.UserReviews.UserReview", b =>
                {
                    b.Property<Guid>("UserReviewedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_reviewed_id");

                    b.Property<Guid>("UserReviewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_reviewer_id");

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserReviewedId", "UserReviewerId")
                        .HasName("pk_user_reviews");

                    b.HasIndex("UserReviewerId")
                        .HasDatabaseName("ix_user_reviews_user_reviewer_id");

                    b.ToTable("user_reviews", "public");
                });

            modelBuilder.Entity("Domain.Pages.LandingInfos.LandingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BannerDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("banner_description");

                    b.Property<string>("BannerLogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("banner_logo_url");

                    b.Property<string>("BannerTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("banner_title");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InfoDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("info_description");

                    b.Property<string>("InfoTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("info_title");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_landing_infos");

                    b.ToTable("landing_infos", "public");
                });

            modelBuilder.Entity("Domain.Attributes.Educations.Education", b =>
                {
                    b.HasOne("Domain.Entities.Developers.Developer", "Developer")
                        .WithMany("Educations")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_educations_developers_developer_id");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Attributes.Experiences.Experience", b =>
                {
                    b.HasOne("Domain.Entities.Developers.Developer", "Developer")
                        .WithMany("Experiences")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_developers_developer_id");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Attributes.JobAttachments.JobAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Jobs.Job", "Job")
                        .WithMany("Attachments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_attachments_jobs_job_id");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Developers.Developer", b =>
                {
                    b.HasOne("Domain.Attributes.Specializations.Specialization", "Specialization")
                        .WithMany("Developers")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developers_specializations_specialization_id");

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithOne("Developer")
                        .HasForeignKey("Domain.Entities.Developers.Developer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developers_users_user_id");

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Job", b =>
                {
                    b.HasOne("Domain.Entities.Recruiters.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jobs_recruiters_recruiter_id");

                    b.HasOne("Domain.Attributes.Specializations.Specialization", "Specialization")
                        .WithMany("Jobs")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jobs_specializations_specialization_id");

                    b.Navigation("Recruiter");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Domain.Entities.Recruiters.Recruiter", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithOne("Recruiter")
                        .HasForeignKey("Domain.Entities.Recruiters.Recruiter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recruiters_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Joins.DeveloperLanguages.DeveloperLanguage", b =>
                {
                    b.HasOne("Domain.Entities.Developers.Developer", "Developer")
                        .WithMany("DeveloperLanguages")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_languages_developers_developer_id");

                    b.HasOne("Domain.Attributes.Languages.Language", "Language")
                        .WithMany("DeveloperLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_languages_languages_language_id");

                    b.Navigation("Developer");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Domain.Joins.DeveloperSkills.DeveloperSkill", b =>
                {
                    b.HasOne("Domain.Entities.Developers.Developer", "Developer")
                        .WithMany("DeveloperSkills")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_skills_developers_developer_id");

                    b.HasOne("Domain.Attributes.Skills.Skill", "Skill")
                        .WithMany("DeveloperSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_skills_skills_skill_id");

                    b.Navigation("Developer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Joins.JobDevelopers.JobDeveloper", b =>
                {
                    b.HasOne("Domain.Entities.Developers.Developer", "Developer")
                        .WithMany("JobDevelopers")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_developers_developers_developer_id");

                    b.HasOne("Domain.Entities.Jobs.Job", "Job")
                        .WithMany("JobDevelopers")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_developers_jobs_job_id");

                    b.Navigation("Developer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Joins.JobLanguages.JobLanguage", b =>
                {
                    b.HasOne("Domain.Entities.Jobs.Job", "Job")
                        .WithMany("JobLanguages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_languages_jobs_job_id");

                    b.HasOne("Domain.Attributes.Languages.Language", "Language")
                        .WithMany("JobLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_languages_languages_language_id");

                    b.Navigation("Job");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Domain.Joins.JobSkills.JobSkill", b =>
                {
                    b.HasOne("Domain.Entities.Jobs.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_skills_jobs_job_id");

                    b.HasOne("Domain.Attributes.Skills.Skill", "Skill")
                        .WithMany("JobSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_skills_skills_skill_id");

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Joins.UserFollows.UserFollow", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "UserFollowed")
                        .WithMany("UserFollows")
                        .HasForeignKey("UserFollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_follows_users_user_followed_id");

                    b.HasOne("Domain.Entities.Users.User", "UserFollower")
                        .WithMany("UserFollowers")
                        .HasForeignKey("UserFollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_follows_users_user_follower_id");

                    b.Navigation("UserFollowed");

                    b.Navigation("UserFollower");
                });

            modelBuilder.Entity("Domain.Joins.UserReviews.UserReview", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "UserReviewed")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserReviewedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_reviews_users_user_reviewed_id");

                    b.HasOne("Domain.Entities.Users.User", "UserReviewer")
                        .WithMany("UserReviewsFrom")
                        .HasForeignKey("UserReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_reviews_users_user_reviewer_id");

                    b.Navigation("UserReviewed");

                    b.Navigation("UserReviewer");
                });

            modelBuilder.Entity("Domain.Attributes.Languages.Language", b =>
                {
                    b.Navigation("DeveloperLanguages");

                    b.Navigation("JobLanguages");
                });

            modelBuilder.Entity("Domain.Attributes.Skills.Skill", b =>
                {
                    b.Navigation("DeveloperSkills");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("Domain.Attributes.Specializations.Specialization", b =>
                {
                    b.Navigation("Developers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Developers.Developer", b =>
                {
                    b.Navigation("DeveloperLanguages");

                    b.Navigation("DeveloperSkills");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("JobDevelopers");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Job", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("JobDevelopers");

                    b.Navigation("JobLanguages");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("Domain.Entities.Recruiters.Recruiter", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Developer");

                    b.Navigation("Recruiter");

                    b.Navigation("UserFollowers");

                    b.Navigation("UserFollows");

                    b.Navigation("UserReviews");

                    b.Navigation("UserReviewsFrom");
                });
#pragma warning restore 612, 618
        }
    }
}
