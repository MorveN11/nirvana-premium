// <auto-generated />
using System;
using Infrastructure.Persistent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Developers.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("ModalityPreferred")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modality_preferred");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<double>("SalaryPerHourExpected")
                        .HasColumnType("double precision")
                        .HasColumnName("salary_per_hour_expected");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("double precision")
                        .HasColumnName("years_of_experience");

                    b.HasKey("Id")
                        .HasName("pk_developers");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_developers_specialization_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_developers_user_id");

                    b.ToTable("developers", "public");
                });

            modelBuilder.Entity("Domain.Jobs.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Modality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modality");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid")
                        .HasColumnName("recruiter_id");

                    b.Property<double>("SalaryPerHour")
                        .HasColumnType("double precision")
                        .HasColumnName("salary_per_hour");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schedule");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex("RecruiterId")
                        .HasDatabaseName("ix_jobs_recruiter_id");

                    b.ToTable("jobs", "public");
                });

            modelBuilder.Entity("Domain.Languages.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", "public");
                });

            modelBuilder.Entity("Domain.Recruiters.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_recruiter");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_recruiter_user_id");

                    b.ToTable("recruiter", "public");
                });

            modelBuilder.Entity("Domain.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.ToTable("skills", "public");
                });

            modelBuilder.Entity("Domain.Specializations.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_specializations");

                    b.ToTable("specializations", "public");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("DoOnboarding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("do_onboarding");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("developer_languages", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uuid")
                        .HasColumnName("developers_id");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("languages_id");

                    b.HasKey("DevelopersId", "LanguagesId")
                        .HasName("pk_developer_languages");

                    b.HasIndex("LanguagesId")
                        .HasDatabaseName("ix_developer_languages_languages_id");

                    b.ToTable("developer_languages", "public");
                });

            modelBuilder.Entity("developer_skills", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uuid")
                        .HasColumnName("developers_id");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid")
                        .HasColumnName("skills_id");

                    b.HasKey("DevelopersId", "SkillsId")
                        .HasName("pk_developer_skills");

                    b.HasIndex("SkillsId")
                        .HasDatabaseName("ix_developer_skills_skills_id");

                    b.ToTable("developer_skills", "public");
                });

            modelBuilder.Entity("job_languages", b =>
                {
                    b.Property<Guid>("JobsId")
                        .HasColumnType("uuid")
                        .HasColumnName("jobs_id");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("languages_id");

                    b.HasKey("JobsId", "LanguagesId")
                        .HasName("pk_job_languages");

                    b.HasIndex("LanguagesId")
                        .HasDatabaseName("ix_job_languages_languages_id");

                    b.ToTable("job_languages", "public");
                });

            modelBuilder.Entity("job_skills", b =>
                {
                    b.Property<Guid>("JobsId")
                        .HasColumnType("uuid")
                        .HasColumnName("jobs_id");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid")
                        .HasColumnName("skills_id");

                    b.HasKey("JobsId", "SkillsId")
                        .HasName("pk_job_skills");

                    b.HasIndex("SkillsId")
                        .HasDatabaseName("ix_job_skills_skills_id");

                    b.ToTable("job_skills", "public");
                });

            modelBuilder.Entity("Domain.Developers.Developer", b =>
                {
                    b.HasOne("Domain.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developers_specializations_specialization_id");

                    b.HasOne("Domain.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Developers.Developer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developers_users_user_id");

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Jobs.Job", b =>
                {
                    b.HasOne("Domain.Recruiters.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jobs_recruiter_recruiter_id");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Domain.Recruiters.Recruiter", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Recruiters.Recruiter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recruiter_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("developer_languages", b =>
                {
                    b.HasOne("Domain.Developers.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_languages_developers_developers_id");

                    b.HasOne("Domain.Languages.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_languages_languages_languages_id");
                });

            modelBuilder.Entity("developer_skills", b =>
                {
                    b.HasOne("Domain.Developers.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_skills_developers_developers_id");

                    b.HasOne("Domain.Skills.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_developer_skills_skills_skills_id");
                });

            modelBuilder.Entity("job_languages", b =>
                {
                    b.HasOne("Domain.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_languages_jobs_jobs_id");

                    b.HasOne("Domain.Languages.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_languages_languages_languages_id");
                });

            modelBuilder.Entity("job_skills", b =>
                {
                    b.HasOne("Domain.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_skills_jobs_jobs_id");

                    b.HasOne("Domain.Skills.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_skills_skills_skills_id");
                });

            modelBuilder.Entity("Domain.Recruiters.Recruiter", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
